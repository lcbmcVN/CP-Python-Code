{
	// Place your snippets for python here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
  // 
  // READ THIS: THIS IS FOR VSCODE SNIPPETS, TYPING START TO ACTIVATE IT
	"Start To CP": {
		"prefix": "start",
		"body": [
			"# for index, value in enumerate(list)",
			"# '{:02d}'.format(1) --> 001",
			"# '{0:.2f}'.format(1.5) --> 1.50",
			"# Stack is DFS, Queue is BFS",
			"# AND --> &, OR --> |, XOR --> ^",
			"# (a/b)%c = (a mod (b * c) / b) mod c",
			"# (a/b)%c = (a mod c * b^(c-2) mod c) mod c ||| c is prime number",
			"# To use custom compare in heapq, make a Class have a __lt__ func",
			"# Ctrl + Alt + N: run code",
			"# Ctrl + J: hide Panel",
			"",
			"import sys",
			"from io import BytesIO",
			"from os import read, fstat",
			"#from heapq import heapify, heappush, heappop",
			"#from collections import defaultdict, deque, Counter, OrderedDict",
			"#from math import gcd,log,log2,log10",
			"#from bisect import bisect_left, bisect_right, insort_left, insort_right",
			"#from typing import List, Tuple",
			"#from functools import lru_cache, cmp_to_key",
			"",
			"def IO(name = ''):",
			"\tif name:",
			"\t\tsys.stdin = open(name+'.inp', 'r')",
			"\t\tsys.stdout = open(name+'.out', 'w')",
			"",
			"IO('task')",
			"",
			"input = lambda : sys.stdin.readline().strip()",
			"#input = lambda : sys.stdin.buffer.readline().strip()",
			"#input = BytesIO(read(0,fstat(0).st_size)).readline",
			"#print = sys.stdout.write",
			"# sys.setrecursionlimit(int(1e6))",
			"",
			"# Constant",
			"INF = 1<<60",
			"MOD = int(1e9)+7",	
			"endl = '\\n'",
			"",
			"def solve():",
			"\tpass$0",
			"",
			"def main():",
			"\t#Code",
			"\tt = int(input())$1",
			"\tfor i in range(1,t+1):",
			"\t\tsolve()",
			"",
			"if __name__ == '__main__':",
			"\tmain()",
			"",
		],
		"description": "Default Snippet for Competitive Coding"
	}
}
